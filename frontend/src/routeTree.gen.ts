/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthProfileRouteImport } from './routes/_auth.profile'
import { Route as AuthNotesRouteImport } from './routes/_auth.notes'
import { Route as AuthFoldersRouteImport } from './routes/_auth.folders'
import { Route as AuthDashboardRouteImport } from './routes/_auth.dashboard'
import { Route as loginLoginLayoutRouteImport } from './routes/(login)/_loginLayout'
import { Route as AuthNoteNoteIdRouteImport } from './routes/_auth.note.$noteId'
import { Route as AuthFolderFolderIdRouteImport } from './routes/_auth.folder.$folderId'
import { Route as loginLoginLayoutRegisterRouteImport } from './routes/(login)/_loginLayout/register'
import { Route as loginLoginLayoutLoginRouteImport } from './routes/(login)/_loginLayout/login'

const loginRouteImport = createFileRoute('/(login)')()

const loginRoute = loginRouteImport.update({
  id: '/(login)',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)
const AuthNotesRoute = AuthNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => AuthRoute,
} as any)
const AuthFoldersRoute = AuthFoldersRouteImport.update({
  id: '/folders',
  path: '/folders',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardRoute = AuthDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)
const loginLoginLayoutRoute = loginLoginLayoutRouteImport.update({
  id: '/_loginLayout',
  getParentRoute: () => loginRoute,
} as any)
const AuthNoteNoteIdRoute = AuthNoteNoteIdRouteImport.update({
  id: '/note/$noteId',
  path: '/note/$noteId',
  getParentRoute: () => AuthRoute,
} as any)
const AuthFolderFolderIdRoute = AuthFolderFolderIdRouteImport.update({
  id: '/folder/$folderId',
  path: '/folder/$folderId',
  getParentRoute: () => AuthRoute,
} as any)
const loginLoginLayoutRegisterRoute =
  loginLoginLayoutRegisterRouteImport.update({
    id: '/register',
    path: '/register',
    getParentRoute: () => loginLoginLayoutRoute,
  } as any)
const loginLoginLayoutLoginRoute = loginLoginLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => loginLoginLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof loginLoginLayoutRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/folders': typeof AuthFoldersRoute
  '/notes': typeof AuthNotesRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof loginLoginLayoutLoginRoute
  '/register': typeof loginLoginLayoutRegisterRoute
  '/folder/$folderId': typeof AuthFolderFolderIdRoute
  '/note/$noteId': typeof AuthNoteNoteIdRoute
}
export interface FileRoutesByTo {
  '/': typeof loginLoginLayoutRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/folders': typeof AuthFoldersRoute
  '/notes': typeof AuthNotesRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof loginLoginLayoutLoginRoute
  '/register': typeof loginLoginLayoutRegisterRoute
  '/folder/$folderId': typeof AuthFolderFolderIdRoute
  '/note/$noteId': typeof AuthNoteNoteIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/(login)': typeof loginRouteWithChildren
  '/(login)/_loginLayout': typeof loginLoginLayoutRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/folders': typeof AuthFoldersRoute
  '/_auth/notes': typeof AuthNotesRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/(login)/_loginLayout/login': typeof loginLoginLayoutLoginRoute
  '/(login)/_loginLayout/register': typeof loginLoginLayoutRegisterRoute
  '/_auth/folder/$folderId': typeof AuthFolderFolderIdRoute
  '/_auth/note/$noteId': typeof AuthNoteNoteIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/folders'
    | '/notes'
    | '/profile'
    | '/login'
    | '/register'
    | '/folder/$folderId'
    | '/note/$noteId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/folders'
    | '/notes'
    | '/profile'
    | '/login'
    | '/register'
    | '/folder/$folderId'
    | '/note/$noteId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/(login)'
    | '/(login)/_loginLayout'
    | '/_auth/dashboard'
    | '/_auth/folders'
    | '/_auth/notes'
    | '/_auth/profile'
    | '/(login)/_loginLayout/login'
    | '/(login)/_loginLayout/register'
    | '/_auth/folder/$folderId'
    | '/_auth/note/$noteId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  loginRoute: typeof loginRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(login)': {
      id: '/(login)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/notes': {
      id: '/_auth/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthNotesRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/folders': {
      id: '/_auth/folders'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof AuthFoldersRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardRouteImport
      parentRoute: typeof AuthRoute
    }
    '/(login)/_loginLayout': {
      id: '/(login)/_loginLayout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loginLoginLayoutRouteImport
      parentRoute: typeof loginRoute
    }
    '/_auth/note/$noteId': {
      id: '/_auth/note/$noteId'
      path: '/note/$noteId'
      fullPath: '/note/$noteId'
      preLoaderRoute: typeof AuthNoteNoteIdRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/folder/$folderId': {
      id: '/_auth/folder/$folderId'
      path: '/folder/$folderId'
      fullPath: '/folder/$folderId'
      preLoaderRoute: typeof AuthFolderFolderIdRouteImport
      parentRoute: typeof AuthRoute
    }
    '/(login)/_loginLayout/register': {
      id: '/(login)/_loginLayout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof loginLoginLayoutRegisterRouteImport
      parentRoute: typeof loginLoginLayoutRoute
    }
    '/(login)/_loginLayout/login': {
      id: '/(login)/_loginLayout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof loginLoginLayoutLoginRouteImport
      parentRoute: typeof loginLoginLayoutRoute
    }
  }
}

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthFoldersRoute: typeof AuthFoldersRoute
  AuthNotesRoute: typeof AuthNotesRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthFolderFolderIdRoute: typeof AuthFolderFolderIdRoute
  AuthNoteNoteIdRoute: typeof AuthNoteNoteIdRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthFoldersRoute: AuthFoldersRoute,
  AuthNotesRoute: AuthNotesRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthFolderFolderIdRoute: AuthFolderFolderIdRoute,
  AuthNoteNoteIdRoute: AuthNoteNoteIdRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface loginLoginLayoutRouteChildren {
  loginLoginLayoutLoginRoute: typeof loginLoginLayoutLoginRoute
  loginLoginLayoutRegisterRoute: typeof loginLoginLayoutRegisterRoute
}

const loginLoginLayoutRouteChildren: loginLoginLayoutRouteChildren = {
  loginLoginLayoutLoginRoute: loginLoginLayoutLoginRoute,
  loginLoginLayoutRegisterRoute: loginLoginLayoutRegisterRoute,
}

const loginLoginLayoutRouteWithChildren =
  loginLoginLayoutRoute._addFileChildren(loginLoginLayoutRouteChildren)

interface loginRouteChildren {
  loginLoginLayoutRoute: typeof loginLoginLayoutRouteWithChildren
}

const loginRouteChildren: loginRouteChildren = {
  loginLoginLayoutRoute: loginLoginLayoutRouteWithChildren,
}

const loginRouteWithChildren = loginRoute._addFileChildren(loginRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  loginRoute: loginRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
