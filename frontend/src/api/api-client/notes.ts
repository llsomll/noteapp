/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * NoteApp API
 * A simple note app with folders and user support.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  HTTPValidationError,
  NoteCreate,
  NoteOut,
  NoteUpdate,
} from "./model";

import { customInstance } from "../api-config";

/**
 * @summary Get Notes
 */
export const getNotes = (signal?: AbortSignal) => {
  return customInstance<NoteOut[]>({
    url: `/api/v1/note/`,
    method: "GET",
    signal,
  });
};

export const getGetNotesQueryKey = () => {
  return [`/api/v1/note/`] as const;
};

export const getGetNotesQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotes>>> = ({
    signal,
  }) => getNotes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNotes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNotesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotes>>
>;
export type GetNotesQueryError = unknown;

export function useGetNotes<
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotes<
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotes>>,
          TError,
          Awaited<ReturnType<typeof getNotes>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNotes<
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Notes
 */

export function useGetNotes<
  TData = Awaited<ReturnType<typeof getNotes>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNotes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNotesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Note
 */
export const createNote = (noteCreate: NoteCreate, signal?: AbortSignal) => {
  return customInstance<NoteOut>({
    url: `/api/v1/note/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: noteCreate,
    signal,
  });
};

export const getCreateNoteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNote>>,
    TError,
    { data: NoteCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNote>>,
  TError,
  { data: NoteCreate },
  TContext
> => {
  const mutationKey = ["createNote"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNote>>,
    { data: NoteCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createNote(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNote>>
>;
export type CreateNoteMutationBody = NoteCreate;
export type CreateNoteMutationError = HTTPValidationError;

/**
 * @summary Create Note
 */
export const useCreateNote = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createNote>>,
      TError,
      { data: NoteCreate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createNote>>,
  TError,
  { data: NoteCreate },
  TContext
> => {
  const mutationOptions = getCreateNoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Note
 */
export const getNote = (noteId: string, signal?: AbortSignal) => {
  return customInstance<NoteOut>({
    url: `/api/v1/note/${noteId}`,
    method: "GET",
    signal,
  });
};

export const getGetNoteQueryKey = (noteId: string) => {
  return [`/api/v1/note/${noteId}`] as const;
};

export const getGetNoteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNote>>,
  TError = HTTPValidationError,
>(
  noteId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNoteQueryKey(noteId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNote>>> = ({
    signal,
  }) => getNote(noteId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!noteId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetNoteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNote>>
>;
export type GetNoteQueryError = HTTPValidationError;

export function useGetNote<
  TData = Awaited<ReturnType<typeof getNote>>,
  TError = HTTPValidationError,
>(
  noteId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNote>>,
          TError,
          Awaited<ReturnType<typeof getNote>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNote<
  TData = Awaited<ReturnType<typeof getNote>>,
  TError = HTTPValidationError,
>(
  noteId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNote>>,
          TError,
          Awaited<ReturnType<typeof getNote>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNote<
  TData = Awaited<ReturnType<typeof getNote>>,
  TError = HTTPValidationError,
>(
  noteId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Note
 */

export function useGetNote<
  TData = Awaited<ReturnType<typeof getNote>>,
  TError = HTTPValidationError,
>(
  noteId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNote>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNoteQueryOptions(noteId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Note
 */
export const updateNote = (noteId: string, noteUpdate: NoteUpdate) => {
  return customInstance<NoteOut>({
    url: `/api/v1/note/${noteId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: noteUpdate,
  });
};

export const getUpdateNoteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNote>>,
    TError,
    { noteId: string; data: NoteUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateNote>>,
  TError,
  { noteId: string; data: NoteUpdate },
  TContext
> => {
  const mutationKey = ["updateNote"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateNote>>,
    { noteId: string; data: NoteUpdate }
  > = (props) => {
    const { noteId, data } = props ?? {};

    return updateNote(noteId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateNoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateNote>>
>;
export type UpdateNoteMutationBody = NoteUpdate;
export type UpdateNoteMutationError = HTTPValidationError;

/**
 * @summary Update Note
 */
export const useUpdateNote = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateNote>>,
      TError,
      { noteId: string; data: NoteUpdate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateNote>>,
  TError,
  { noteId: string; data: NoteUpdate },
  TContext
> => {
  const mutationOptions = getUpdateNoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Note
 */
export const deleteNote = (noteId: string) => {
  return customInstance<void>({
    url: `/api/v1/note/${noteId}`,
    method: "DELETE",
  });
};

export const getDeleteNoteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNote>>,
    TError,
    { noteId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNote>>,
  TError,
  { noteId: string },
  TContext
> => {
  const mutationKey = ["deleteNote"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNote>>,
    { noteId: string }
  > = (props) => {
    const { noteId } = props ?? {};

    return deleteNote(noteId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNote>>
>;

export type DeleteNoteMutationError = HTTPValidationError;

/**
 * @summary Delete Note
 */
export const useDeleteNote = <TError = HTTPValidationError, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteNote>>,
      TError,
      { noteId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteNote>>,
  TError,
  { noteId: string },
  TContext
> => {
  const mutationOptions = getDeleteNoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
