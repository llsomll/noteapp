/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * NoteApp API
 * A simple note app with folders and user support.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  FolderCreate,
  FolderOut,
  FolderUpdate,
  HTTPValidationError,
} from "./model";

import { customInstance } from "../api-config";

/**
 * @summary Get Folders
 */
export const getFolders = (signal?: AbortSignal) => {
  return customInstance<FolderOut[]>({
    url: `/api/v1/folder/`,
    method: "GET",
    signal,
  });
};

export const getGetFoldersQueryKey = () => {
  return [`/api/v1/folder/`] as const;
};

export const getGetFoldersQueryOptions = <
  TData = Awaited<ReturnType<typeof getFolders>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFolders>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFoldersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFolders>>> = ({
    signal,
  }) => getFolders(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFolders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFoldersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFolders>>
>;
export type GetFoldersQueryError = unknown;

export function useGetFolders<
  TData = Awaited<ReturnType<typeof getFolders>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolders>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFolders>>,
          TError,
          Awaited<ReturnType<typeof getFolders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFolders<
  TData = Awaited<ReturnType<typeof getFolders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolders>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFolders>>,
          TError,
          Awaited<ReturnType<typeof getFolders>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFolders<
  TData = Awaited<ReturnType<typeof getFolders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Folders
 */

export function useGetFolders<
  TData = Awaited<ReturnType<typeof getFolders>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolders>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFoldersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Folder
 */
export const createFolder = (
  folderCreate: FolderCreate,
  signal?: AbortSignal,
) => {
  return customInstance<FolderOut>({
    url: `/api/v1/folder/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: folderCreate,
    signal,
  });
};

export const getCreateFolderMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFolder>>,
    TError,
    { data: FolderCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFolder>>,
  TError,
  { data: FolderCreate },
  TContext
> => {
  const mutationKey = ["createFolder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFolder>>,
    { data: FolderCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createFolder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof createFolder>>
>;
export type CreateFolderMutationBody = FolderCreate;
export type CreateFolderMutationError = HTTPValidationError;

/**
 * @summary Create Folder
 */
export const useCreateFolder = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFolder>>,
      TError,
      { data: FolderCreate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createFolder>>,
  TError,
  { data: FolderCreate },
  TContext
> => {
  const mutationOptions = getCreateFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Folder
 */
export const getFolder = (folderId: string, signal?: AbortSignal) => {
  return customInstance<FolderOut>({
    url: `/api/v1/folder/${folderId}`,
    method: "GET",
    signal,
  });
};

export const getGetFolderQueryKey = (folderId: string) => {
  return [`/api/v1/folder/${folderId}`] as const;
};

export const getGetFolderQueryOptions = <
  TData = Awaited<ReturnType<typeof getFolder>>,
  TError = HTTPValidationError,
>(
  folderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFolderQueryKey(folderId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFolder>>> = ({
    signal,
  }) => getFolder(folderId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!folderId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetFolderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFolder>>
>;
export type GetFolderQueryError = HTTPValidationError;

export function useGetFolder<
  TData = Awaited<ReturnType<typeof getFolder>>,
  TError = HTTPValidationError,
>(
  folderId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFolder>>,
          TError,
          Awaited<ReturnType<typeof getFolder>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFolder<
  TData = Awaited<ReturnType<typeof getFolder>>,
  TError = HTTPValidationError,
>(
  folderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFolder>>,
          TError,
          Awaited<ReturnType<typeof getFolder>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFolder<
  TData = Awaited<ReturnType<typeof getFolder>>,
  TError = HTTPValidationError,
>(
  folderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Folder
 */

export function useGetFolder<
  TData = Awaited<ReturnType<typeof getFolder>>,
  TError = HTTPValidationError,
>(
  folderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFolder>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFolderQueryOptions(folderId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Folder
 */
export const updateFolder = (folderId: string, folderUpdate: FolderUpdate) => {
  return customInstance<FolderOut>({
    url: `/api/v1/folder/${folderId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: folderUpdate,
  });
};

export const getUpdateFolderMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFolder>>,
    TError,
    { folderId: string; data: FolderUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateFolder>>,
  TError,
  { folderId: string; data: FolderUpdate },
  TContext
> => {
  const mutationKey = ["updateFolder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateFolder>>,
    { folderId: string; data: FolderUpdate }
  > = (props) => {
    const { folderId, data } = props ?? {};

    return updateFolder(folderId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateFolder>>
>;
export type UpdateFolderMutationBody = FolderUpdate;
export type UpdateFolderMutationError = HTTPValidationError;

/**
 * @summary Update Folder
 */
export const useUpdateFolder = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateFolder>>,
      TError,
      { folderId: string; data: FolderUpdate },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateFolder>>,
  TError,
  { folderId: string; data: FolderUpdate },
  TContext
> => {
  const mutationOptions = getUpdateFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Folder
 */
export const deleteFolder = (folderId: string) => {
  return customInstance<void>({
    url: `/api/v1/folder/${folderId}`,
    method: "DELETE",
  });
};

export const getDeleteFolderMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFolder>>,
    TError,
    { folderId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFolder>>,
  TError,
  { folderId: string },
  TContext
> => {
  const mutationKey = ["deleteFolder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFolder>>,
    { folderId: string }
  > = (props) => {
    const { folderId } = props ?? {};

    return deleteFolder(folderId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFolder>>
>;

export type DeleteFolderMutationError = HTTPValidationError;

/**
 * @summary Delete Folder
 */
export const useDeleteFolder = <
  TError = HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteFolder>>,
      TError,
      { folderId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteFolder>>,
  TError,
  { folderId: string },
  TContext
> => {
  const mutationOptions = getDeleteFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
